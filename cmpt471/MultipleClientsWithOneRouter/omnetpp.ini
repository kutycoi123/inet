
[Config inet-veno-single-client]
description = "TCP <---> TCP with Veno algorithm"
*.srv*.tcp.typename = "Tcp"
*.cli[*].tcp.typename = "Tcp"
**.tcp.tcpAlgorithmClass = "TcpVeno"
*.per = 0.01 * ${0, 0.1, 0.2, 0.5, 1, 2, 5}
*.n = 1

[Config inet-veno-two-clients]
description = "TCP <---> TCP with Veno algorithm"
*.srv*.tcp.typename = "Tcp"
*.cli[*].tcp.typename = "Tcp"
**.tcp.tcpAlgorithmClass = "TcpVeno"
*.per = 0.01 * ${0, 0.1, 0.2, 0.5, 1, 2, 5}
*.n = 2


[General]
network = MultipleClientsServer

#sim-time-limit = 1000000s
total-stack = 7MiB

# number of client computers
*.n = 2

# tcp apps
**.cli[*].numApps = 1

#**.cli[*].app[*].typename = "TelnetApp"
#**.cli[*].app[0].localAddress = ""
#**.cli[*].app[0].localPort = -1
#**.cli[*].app[0].connectAddress = "srv"
#**.cli[*].app[0].connectPort = 1000
#
#**.cli[*].app[0].startTime = exponential(5s)
#**.cli[*].app[0].numCommands = int(exponential(10))
#**.cli[*].app[0].commandLength = intWithUnit(exponential(10B))
#**.cli[*].app[0].keyPressDelay = exponential(0.1s)
#**.cli[*].app[0].commandOutputLength = intWithUnit(exponential(40B))
#**.cli[*].app[0].thinkTime = 1s
#**.cli[*].app[0].idleInterval = 2s
#**.cli[*].app[0].reconnectInterval = 30s
#**.cli[*].app[0].dataTransferMode = "object"

# Client and Server app works
#*.cli[*].app[0].typename = "TcpClientApp"
#*.cli[*].app[0].io.connectAddress = "srv"
#*.cli[*].app[0].io.connectPort = 1000
#*.cli[*].app[0].source.productionInterval = uniform(0s, 20s)
#*.cli[*].app[0].source.packetLength = intuniform(100B, 200B)
#*.cli[*].app[0].source.packetData = intuniform(0, 1)
#
#**.srv.numApps = 1
#**.srv.app[0].typename = "TcpServerApp"
#**.srv.app[0].listener.localPort = 1000
#
#**.srv.app[0].listener.serverConnectionModuleType = "inet.applications.tcpapp.TcpRequestResponseApp"
#**.srv..app[0].connection[*].sink.tokenGenerator[0].numTokensPerPacket = intuniform(1, 5)
#**.srv.app[0].connection[*].source.provider[0].providingInterval = uniform(0s, 2s)
#**.srv.app[0].connection[*].source.provider[0].packetLength = intuniform(100B, 1000B)
#**.srv..app[0].connection[*].sink.tokenGenerator[1].numTokensPerPacket = intuniform(10, 20)
#**.srv.app[0].connection[*].source.provider[1].providingInterval = uniform(0s, 0.2s)
#**.srv.app[0].connection[*].source.provider[1].packetLength = intuniform(1000B, 10000B)

**.cli[*].app[0].typename = "TcpSessionApp"
**.cli[*].app[0].active = true
**.cli[*].app[0].localPort = -1
**.cli[*].app[0].connectAddress = "srv"
**.cli[*].app[0].connectPort = 1000
**.cli[*].app[0].tOpen = 0.2s
**.cli[*].app[0].tSend = 0.4s
**.cli[*].app[0].sendBytes = 10000000B
**.cli[*].app[0].sendScript = ""
**.cli[*].app[0].tClose = 25s
**.cli[*].**.bitrate = 5Mbps

**.srv.numApps = 1
**.srv.app[*].typename = "TcpSinkApp"
**.srv.app[0].localPort = 1000
**.srv.app[0].echoFactor = 2.0
**.srv.app[0].echoDelay = 0s


# NIC configuration
**.ppp[*].ppp.queue.typename = "DropTailQueue" # in routers
**.ppp[*].ppp.queue.packetCapacity = 3   # in routers

# turn on throughput stat
**.channel.throughput.result-recording-modes=+last
